---
description: 
globs: 
alwaysApply: true
---
# Backend Structure Document

This document offers an everyday language overview of the backend setup for the agno agent automated NFT minting solution built on the Cardano blockchain. Below is a detailed explanation of the backend architecture, database management, API design, hosting solutions, core infrastructure components, security measures, and monitoring strategies.

## 1. Backend Architecture

The backend is designed to efficiently coordinate a series of specialized agents that handle tasks such as asset creation, metadata generation, minting, and wallet management. Here’s how it is structured:

- **Agent-based Design:**
  - Agents like `ContentCreatorAgent`, `AssetAgent`, `MetadataAgent`, `MintAgent`, `WalletAgent`, and `JobAgent` each handle a specific part of the process.
  - The central `JobAgent` orchestrates these agents, ensuring that the process moves forward smoothly from one step to the next.

- **Design Patterns and Frameworks:**
  - Built on FastAPI, the backend follows a RESTful API approach, ensuring that each component can be accessed via clearly defined endpoints.
  - The modular design promotes scalability and maintainability by allowing updates to individual agents without affecting the whole system.

- **Scalability, Maintainability, and Performance:**
  - Scalable due to separation of responsibilities between agents.
  - Easy to maintain as each component has a well-defined role.
  - Performance is enhanced by efficient orchestration and error handling, ensuring robust operation even under load.

## 2. Database Management

The project uses Supabase/PostgreSQL for managing data. This choice is tailored to the need for storing critical information such as NFT metadata, minting transaction hashes, job statuses, and logs.

- **Database Technology:**
  - PostgreSQL (hosted on Supabase) is used as the main database.

- **Data Organization and Storage:**
  - Data is structured around a Mission Control Panel (MCP) that keeps track of each job’s status, logs, and relevant minting details.
  - The database is accessible via secure, authenticated API endpoints provided by FastAPI.
  - Regular backups and data integrity checks ensure longevity and consistency of stored information.

## 3. Database Schema

### Human Readable Format

- **Jobs Table:** Contains records of each NFT minting job, including status, timestamps, and related metadata.
- **Metadata Table:** Holds CIP-25 compliant JSON metadata for each NFT, including collection details and asset traits.
- **Transactions Table:** Stores transaction hashes and details regarding each minting operation.
- **Logs Table:** Records error messages, process details, and orchestration logs for debugging and monitoring purposes.

### PostgreSQL Schema Example

Below is an example of the PostgreSQL schema in SQL format:

```
-- Table for job tracking
CREATE TABLE jobs (
    id SERIAL PRIMARY KEY,
    user_id VARCHAR(255) NOT NULL,
    status VARCHAR(50) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table for metadata storage (CIP-25 compliant JSON)
CREATE TABLE metadata (
    id SERIAL PRIMARY KEY,
    job_id INTEGER REFERENCES jobs(id) ON DELETE CASCADE,
    metadata JSONB NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table for storing minting transaction details
CREATE TABLE transactions (
    id SERIAL PRIMARY KEY,
    job_id INTEGER REFERENCES jobs(id) ON DELETE CASCADE,
    transaction_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table for logging system events
CREATE TABLE logs (
    id SERIAL PRIMARY KEY,
    job_id INTEGER REFERENCES jobs(id) ON DELETE CASCADE,
    log_message TEXT NOT NULL,
    log_level VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

## 4. API Design and Endpoints

The backend exposes its capabilities through a clean RESTful API built with FastAPI. This design ensures that communication between the frontend (Streamlit UI) and backend is straightforward.

- **API Approach:** RESTful

- **Key Endpoints and Their Functions:**
  - **/job**: Creates and manages minting jobs, tracks the status, and returns progress updates.
  - **/asset**: Handles file uploads, communicates with IPFS via NMKR or web3.storage, and returns URI mappings.
  - **/metadata**: Generates and returns CIP-25 compliant JSON metadata based on user input and asset details.
  - **/mint**: Initiates the NFT minting process via the NMKR API and returns transaction details.
  - **/wallet**: Validates and manages wallet information, ensuring proper hot wallet management for signing transactions.

## 5. Hosting Solutions

The backend is hosted on reliable cloud infrastructure that supports seamless updates and scalability:

- **Cloud Providers and Hosting Environment:**
  - PostgreSQL is hosted on Supabase – a cloud service that ensures high availability and ease of use.
  - FastAPI services may be containerized and deployed using popular cloud providers (like AWS, Azure, or Heroku) ensuring scalability and cost-effectiveness.

- **Benefits:**
  - **Reliability:** Cloud solutions come with high uptime and built-in redundancies.
  - **Scalability:** The system can easily handle increased load by scaling services as needed.
  - **Cost-effectiveness:** Cloud providers offer pay-as-you-go models reducing upfront investment.

## 6. Infrastructure Components

Various components work together to enhance the user experience and overall system performance:

- **Load Balancers:** Distribute incoming requests to various instances of the backend service to ensure no single instance is overwhelmed.
- **Caching Mechanisms:** In-memory caches (like Redis, if implemented) can speed up data retrieval and reduce load on the database.
- **Content Delivery Networks (CDNs):** Although not primarily used for API responses, CDNs can cache static assets from the frontend.
- **Monitoring Tools:** Braintrust monitors system performance, alerting on any issues so that quick resolutions can be made.

## 7. Security Measures

Even though this is a hackathon demo with basic security, several protocols are in place:

- **Authentication & Authorization:**
  - WalletAgent ensures wallet addresses are valid before proceeding.
  - API endpoints are secured with necessary tokens and keys to prevent unauthorized access.

- **Data Encryption:**
  - Sensitive data is encrypted during transmission using HTTPS.
  - Secure storage and access practices help protect any stored sensitive information.

- **Additional Protocols:**
  - Regular error logging and monitoring help detect and address unauthorized access attempts.

## 8. Monitoring and Maintenance

Ensuring the system remains robust and responsive is key:

- **Monitoring Tools:**
  - Braintrust keeps track of backend performance, server uptime, and service reliability.
  - Logging components capture detailed information about errors, system events, and the overall health of the orchestration process.

- **Maintenance Practices:**
  - Regular updates to dependencies and security patches are planned.
  - Scheduled backups of the PostgreSQL database ensure data is not lost.
  - Error handling procedures with clear status messages help in quick recovery from potential issues.

## 9. Conclusion and Overall Backend Summary

To sum up, the backend for the agno agent NFT minting solution uses an agent-based, modular design implemented with FastAPI and backed by a stable PostgreSQL database hosted on Supabase. Key features include:

- **Seamless orchestration** via specialized agents, ensuring smooth flow from content creation to minting.
- **Robust database management** using a well-structured PostgreSQL schema to store job details, metadata, and logs.
- **Clear API definitions** that support communication between frontend and backend using RESTful principles.
- **Reliable cloud-hosting solutions** ensuring scalability and cost-effective operations.
- **Strong security protocols** to protect user data and system integrity, even within a demo environment.
- **Effective monitoring and maintenance** practices to ensure performance, quick error resolution, and consistent system updates.

This comprehensive backend structure supports the project goals by building a reliable, scalable, and clear infrastructure that anyone—regardless of technical expertise—can understand and trust for the automated NFT minting process.