---
description: 
globs: 
alwaysApply: true
---
# Frontend Guideline Document

This document serves as a roadmap for our frontend setup. It details our architecture, design principles, styling approach, component structure, state management, routing, performance, and testing strategies. The goal is to provide a clear and accessible guide for everyone involved in the project, ensuring that our automated NFT minting solution on Cardano is built with consistency, scalability, and user experience in mind.

## 1. Frontend Architecture

We have chosen to build our user interface using Streamlit, a Python-based framework. This choice allows us to quickly prototype the input form where users can submit NFT collection details and creative prompts. 

- **Framework and Libraries:**
  - **Streamlit:** Provides the backbone for our frontend, enabling rapid and interactive UI development.
  - **Python:** Powers our Streamlit application and integrates naturally with our backend agents.

- **Scalability, Maintainability, and Performance:**
  Our architecture is designed for simplicity during the hackathon phase, yet built in a modular way so that it can easily evolve. Streamlit’s component-based system makes it straightforward to add new sections (like additional verification steps or summary pages) when needed. The architecture supports performance by focusing on direct interactions with our backend agents, reducing unnecessary overhead.

## 2. Design Principles

Our design principles ensure that users have a smooth, consistent, and accessible experience while interacting with our demo:

- **Usability:** The interface is intuitive. Users simply fill in the necessary fields and follow the guided process. Clear labels and simple instructions reduce confusion.

- **Accessibility:** We adhere to basic accessibility standards. Fonts, contrast, and navigation are chosen to be easily readable and use-friendly by a diverse audience.

- **Responsiveness:** Although built using Streamlit’s framework—which naturally adapts to different screen sizes—the design ensures that the layout adjusts gracefully from desktops to mobile devices, keeping the experience consistent.

These principles are interwoven in every user interface element, ensuring that even those unfamiliar with blockchain or NFT concepts can comfortably use the system.

## 3. Styling and Theming

Our visual style is modern and minimal, blending flat design principles with subtle hints of material aesthetics and a touch of glassmorphism to keep the design fresh and transparent. 

- **CSS Methodology:**
  - While Streamlit handles most of the UI rendering, we incorporate custom CSS where needed. We lean on a simplified variant of BEM (Block, Element, Modifier) for any custom styling to keep our CSS modular and scalable.

- **Pre-processors and Frameworks:**
  - Streamlit allows us to inject custom styles. For more advanced styling, we have the option to integrate SASS if the project is expanded beyond the hackathon demo phase.

- **Theming and Consistency:**
  - **Style:** Modern, flat, with touches of glassmorphism to give the UI depth without overcomplicating the design. 
  - **Color Palette:**
    - Primary: #1E1E1E (Dark, modern base)
    - Secondary: #FFFFFF (Clean and crisp white text/background elements)
    - Accent: #FF6B6B (Warm highlight for buttons and important elements)
    - Additional: #00CED1 (Cool, calming tones for subtle highlights and information boxes)

- **Fonts:**
  - We recommend using a clear, sans-serif font such as Roboto or Open Sans. This matches the modern aesthetic of the app and enhances readability.

## 4. Component Structure

Even though Streamlit applications are traditionally single-script deployments, our approach encourages a component-based mindset:

- **Organization:**
  - The UI is divided into reusable parts: input forms, feedback messages, status indicators, and a summary dashboard.
  - Each component or section is kept in its own Python module, making it easier to maintain and update as the project evolves.

- **Reusability:**
  - By keeping our components isolated, we not only streamline development but also set the stage for scaling up the application with additional features or a more complex UI structure in the future.

## 5. State Management

State management in our demo is handled using Streamlit’s built-in session state.

- **Session State:**
  - User inputs and intermediate results (such as image generation status, asset upload confirmation, and transaction hash results) are stored within the session state. This enables the app to retain information as the user moves through the multi-step NFT pipeline.

- **Benefits:**
  - This approach simplifies data sharing between UI components and ensures that the user experience remains smooth even if the process involves several asynchronous calls to different backend agents.

## 6. Routing and Navigation

Streamlit doesn’t use traditional routing like single-page applications built with React or Vue. Instead, we have opted for a multi-page or multi-section strategy.

- **Navigation Approach:**
  - The UI consists of several sections, each corresponding to a step in our NFT pipeline (e.g., input form, image generation status, asset upload, etc.).
  - Users can easily follow the process via a clear flow, and conditional rendering within Streamlit helps to hide or reveal sections as needed.

- **User Movement:**
  - Instead of multiple URL routes, navigation is streamlined through the application’s logical progression—starting from input capture, followed by status displays from each backend interaction.

## 7. Performance Optimization

Even within the simplicity of our hackathon demo, we place importance on performance to create a responsive experience:

- **Lazy Loading and Code Splitting:**
  - Where possible, components that are not immediately necessary are loaded only when needed. Streamlit’s modular approach naturally supports this by only rendering sections relevant to the current state.

- **Asset Optimization:**
  - Image assets, especially the 1024x1024 images generated by DALL·E, are optimized for quick loading. We ensure that any large files are handled efficiently to avoid delays.

- **Contributions to User Experience:**
  - A faster, more responsive UI means less waiting time between steps in the NFT process, keeping users engaged and aware of the progression.

## 8. Testing and Quality Assurance

As this is a hackathon demo, our testing strategy is simplified, yet covers essential aspects of quality control:

- **Testing Strategies:**
  - **Unit Tests:** Using Python’s testing frameworks (e.g., pytest) to validate individual UI components and functions.
  - **Integration Tests:** Simple end-to-end tests ensure that the entire flow—from user input, through the multi-agent pipeline, to final status display—works as intended.
  - **End-to-End Tests:** Although not exhaustive, basic browser tests (using tools like Selenium if extended) help simulate user interactions.

- **Tools and Frameworks:**
  - Emphasis is on test scripts and manually checking each stage of the pipeline. For in-depth testing in future iterations, additional tools can be integrated as needed.

## 9. Conclusion and Overall Frontend Summary

In summary, our frontend is built with simplicity, maintainability, and user-centric design in mind:

- We use Streamlit to rapidly develop an intuitive, clean, and responsive frontend for our automated NFT minting solution on Cardano.
- Our design principles focus on clear usability, accessibility, and responsiveness, ensuring that users can easily interact with our demo regardless of their technical expertise.
- The styling follows a modern, flat, and minimally glassmorphic design using a consistent color palette and easy-to-read fonts, reinforcing the brand’s aesthetic.
- Components are modular and easily maintainable, with state managed efficiently through built-in session state management.
- Navigation is straightforward, following the logical steps of the NFT pipeline, and backed by performance optimizations to ensure quick load times and seamless interactions.
- Although underlying testing is basic due to the nature of a hackathon demo, the foundations are laid for further expansion and robust quality assurance.

This frontend guideline ensures that every team member and stakeholder has clarity on how the UI is structured, how the design principles are applied, and how the overall frontend setup supports the ambitious goals of our NFT minting solution. As the project evolves, these guidelines will also help in scaling and refining the UI to meet more advanced requirements.