---
description: 
globs: 
alwaysApply: true
---
# Project Requirements Document (PRD)

## 1. Project Overview

This project is an NFT minting solution built around a collection of specialized agents that handle every step of creating and launching an NFT drop on the Cardano blockchain. The system starts with a user-friendly Streamlit interface where users provide creative prompts and collection details. If users do not supply any asset files, the system uses the DALL·E tool to generate dreamlike 1024×1024 forest images with a surreal, ethereal art style. These images are then uploaded securely to IPFS, enriched with CIP-25 compliant metadata, and finally minted as NFTs using the NMKR API, all under the orchestration of a dedicated JobAgent.

The project is being built as a hackathon demo to showcase a fully automated NFT drop pipeline that integrates several third-party services. Key objectives include demonstrating a seamless flow—from content creation through asset storage and metadata generation to minting and wallet integration—while ensuring ease of use and interoperability among the different agents. Success will be measured by the system’s ability to generate, process, and mint NFTs reliably with a complete audit trail stored in Supabase/PostgreSQL.

## 2. In-Scope vs. Out-of-Scope

**In-Scope:**

*   Building a multi-agent NFT minting pipeline that includes:

    *   Content generation through the DALL·E tool if no assets are provided.
    *   Asset uploading to IPFS via NMKR or web3.storage.
    *   Generating CIP-25 compliant NFT metadata.
    *   Minting NFTs through the NMKR API.
    *   Wallet address validation and handling of a hot wallet for signing transactions.
    *   A pay-per-mint integration with Masumi Payments.
    *   Coordinated orchestration via a JobAgent that monitors job statuses and stores results in Supabase or PostgreSQL.

*   Developing a simple user interface using Streamlit to collect NFT collection details and creative prompts.

*   Utilizing agent models such as GPT-4o along with support from Claude 3.7, Claude 3.5 Sonnet, and Gemini 2.5 Pro for intelligent task assistance.

*   Demonstrating integration with third-party services like Braintrust for monitoring.

**Out-of-Scope:**

*   Advanced security features or complex wallet verification measures, as this is a hackathon demo with minimal security requirements.
*   Mobile applications, desktop applications, or other frontend frameworks apart from a simple Streamlit web interface.
*   Extensive customization of NFT art styles beyond a standard surreal and ethereal aesthetic at a resolution of 1024×1024.
*   In-depth analytics or reporting beyond basic job status tracking and logging within the Supabase/PostgreSQL database.
*   Future phase enhancements like multi-chain support or extended payment models beyond pay-per-mint.

## 3. User Flow

A user begins by accessing a simple form on a Streamlit-powered UI. The interface asks for essential NFT collection details such as the title, collection name, and a creative prompt. If the user does not upload any assets, the request is automatically routed to the ContentCreatorAgent, which uses the DALL·E tool to generate dreamlike forest images. These generated images are then passed along to the rest of the pipeline.

After image creation, the process continues with the images being uploaded to IPFS through the AssetAgent. Next, the MetadataAgent produces CIP-25 compliant metadata based on user input including collection details and royalties. The MintAgent then uses the NMKR API to mint the NFTs on Cardano, while the WalletAgent validates and handles wallet integration. The JobAgent orchestrates these steps, tracks every operation, and stores key outcomes such as transaction hashes and metadata logs in a Supabase/PostgreSQL database. Finally, the complete job result is returned to the user as a structured response.

## 4. Core Features

*   **Intelligent Image Generation:**

    *   Uses the DALL·E tool to generate 1024×1024 images with a surreal, ethereal aesthetic when no assets are provided.
    *   Generates a list of image URLs or paths for further processing.

*   **Robust Asset Upload and IPFS Integration:**

    *   Uploads generated or provided assets to IPFS (using NMKR or web3.storage).
    *   Returns a mapping of asset filenames to their respective IPFS URIs ensuring traceability.

*   **Compliance-Driven Metadata Generation:**

    *   Generates JSON metadata compliant with Cardano’s CIP-25 standard.
    *   Processes collection name, royalties, asset traits, and other details to create structured metadata.

*   **NFT Minting via NMKR API:**

    *   Interfaces with the NMKR API to mint NFTs on Cardano.
    *   Captures and returns minting transaction hashes for verification.

*   **Secure Wallet Integration and Transaction Routing:**

    *   Validates user wallet addresses.
    *   Manages an internal hot wallet for signing transactions and processing ADA routing (basic implementation for hackathon demo).

*   **Pay-Per-Mint Payment Integration:**

    *   Integrates Masumi Payments to handle payment transactions on a pay-per-mint model.

*   **Coordinated Orchestration:**

    *   The JobAgent oversees the pipeline (ContentCreator → Asset → Metadata → Mint → Wallet).
    *   Manages job status tracking and result storage in Supabase/PostgreSQL.

## 5. Tech Stack & Tools

*   **Backend:**

    *   Agno for managing agents.
    *   FastAPI (following MIP-003 specifications) to handle API endpoints.
    *   NMKR API for NFT minting operations.
    *   IPFS for decentralized asset storage (via NMKR or web3.storage).
    *   Supabase/PostgreSQL for storing job statuses, NFT metadata, and minting transaction hashes.

*   **Frontend:**

    *   Streamlit for a simple input form and initiating the NFT drop process.

*   **Agents & Models:**

    *   OpenAIChat (GPT-4o) for handling the core logic and serving as the model for each agent.
    *   Additional support models and tools: Claude 3.7 Sonnet, Claude 3.5 Sonnet, and Gemini 2.5 Pro.
    *   DALL·E tool for creative image generation.

*   **Payments & Monitoring:**

    *   Masumi Payments for implementing a pay-per-mint payment model.
    *   Braintrust for monitoring system performance and job statuses.

*   **Development Tools:**

    *   Cursor for an advanced AI-powered coding IDE with real-time suggestions.

## 6. Non-Functional Requirements

*   **Performance:**

    *   The system should provide a responsive user experience, with each processing stage (image generation, upload, minting) completing within a reasonable timeframe to maintain overall fluidity.
    *   Optimized asset uploads and API calls to minimize delays.

*   **Security:**

    *   Basic validation for wallet addresses is required. Advanced security measures are not implemented since this is a hackathon demo.
    *   Minimal security compliance due to the demo nature, but the design should allow easy integration of enhanced security features in future iterations.

*   **Compliance:**

    *   Metadata generation must adhere strictly to Cardano’s CIP-25 standards.
    *   The system should ensure that asset URIs and transaction hashes are stored securely in the database.

*   **Usability:**

    *   The frontend must be intuitive, requiring minimal training for users to initiate the NFT creation process.
    *   Clear and structured responses from the JobAgent after completion of the process.

*   **Scalability:**

    *   The system should allow easy scaling of agents and API integrations to accommodate increased user load or future feature extensions.

## 7. Constraints & Assumptions

*   The project assumes availability of third-party APIs and services such as NMKR API, IPFS storage services, and Masumi Payments.
*   It relies on Agno’s agent framework and FastAPI following the MIP-003 specification.
*   Given that this is a hackathon demo, advanced security measures are omitted, and wallet integration is kept basic.
*   The image generation process assumes standard NFT image dimensions (1024×1024) and a surreal, ethereal art style, unless specified otherwise by the user.
*   The system assumes that Supabase/PostgreSQL and Braintrust integrations are properly set up to handle storage and monitoring tasks.

## 8. Known Issues & Potential Pitfalls

*   **API Rate Limits:**

    *   The DALL·E tool and IPFS upload may encounter rate limits, which can slow down processing during high load. Implementing retry mechanisms and monitoring API quotas might be necessary.

*   **Integration Challenges:**

    *   Maintaining smooth integration between multiple agents (ContentCreator, Asset, Metadata, Mint, Wallet, Job) may be challenging. Clear communication protocols and thorough testing are required.

*   **Transaction Failures:**

    *   Minting via the NMKR API might occasionally result in failed transactions. Logging and error-handling routines should capture these scenarios and possibly trigger a retry.

*   **Data Mapping and Synchronization:**

    *   Mapping asset filenames to IPFS URIs and ensuring consistency in metadata generation is critical. The system must include checks for data integrity.

*   **Wallet Handling:**

    *   Although advanced security is not required for this demo, the basic wallet integration may encounter issues if an invalid address is provided. Proper user feedback should be provided to flag such errors.

*   **Payment Integration:**

    *   The pay-per-mint model using Masumi Payments needs to be rigorously tested to ensure that payment processing aligns correctly with NFT minting events.

To mitigate these issues, incorporate robust error logging, clear status messages, and fail-safe mechanisms in the agent orchestration. Extensive testing at each stage of the pipeline is essential to confirm that all parts of the system work in harmony.

This PRD serves as the main brain for the AI model, ensuring that subsequent technical documents—covering tech stack details, frontend guidelines, backend structure, application flowcharts, and more—are generated without ambiguity.
