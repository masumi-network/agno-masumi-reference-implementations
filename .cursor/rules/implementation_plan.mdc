---
description: 
globs: 
alwaysApply: true
---
⸻

🌌 Astryn – Telegram NFT Agent: Full Implementation Plan

(With RabbitMQ queueing, Agno agent interface, RAG via VectorDB, and Masumi payments)

⸻

🧱 Phase 1: Architecture & Tiered Flow Design

🧠 Stack Overview

Component	Tech
Bot Interface	Telegram (aiogram or grammY)
Agent Framework	Agno Agent SDK (MIP-003)
Monetization	Masumi
NFT Minting	NMKR Studio API
Database/Auth	Supabase with MCP (via Cursor)
Media Storage	Supabase Storage
Monitoring	Braintrust
Content Generation	DALL·E, SDXL, AnimateDiff, RunwayML
Queue System	🆕 RabbitMQ
Workers	Async Python workers (Pika or Celery)
RAG / Retrieval	Agno VectorDB



⸻

⚙️ Phase 2: Supabase Schema Setup

Table	Fields
users	id, telegram_id, wallet, …
nft_jobs	id, tier, status, prompt, media_url, generated_media_url, tx_hash, is_paid, retry_count, last_error, created_at, updated_at
payments	id, job_id, masumi_job_id, status, amount

✅ Status Flow:

awaiting_payment → paid → queued_generation → generating → queued_minting → minting → complete → notified



⸻

🤖 Phase 3: Telegram Bot Integration

✅ Bot Flow
	•	/start
	•	Accepts:
	•	File upload (Tier 1 – manual content)
	•	Prompt (Tier 2 – AI-generated content)
	•	Requests Cardano wallet
	•	Generates Masumi payment link
	•	After payment:
	•	Tier 1 → enqueue to mint_nft
	•	Tier 2 → enqueue to generate_nft

⸻

💸 Phase 4: Masumi Monetization Integration
	•	Masumi used for job-level payment gating
	•	Payment link includes:
	•	Job ID, tier, wallet address, media type
	•	On payment confirmation (via webhook):
	•	Update Supabase (status = paid)
	•	Enqueue job into appropriate RabbitMQ queue

⸻

🧰 Phase 5: RabbitMQ Job Queueing System

🎯 Queue Names

Queue	Description
generate_nft	Tier 2 jobs after payment
mint_nft	All mint-ready jobs
notify_user	Post-mint Telegram notifications

🧵 Worker Services

generation_worker.py
	•	Consumes generate_nft
	•	Uses RAG-enhanced prompt (Agno VectorDB)
	•	Generates media → uploads to Supabase
	•	Updates job → pushes to mint_nft

minting_worker.py
	•	Consumes mint_nft
	•	Uploads to NMKR → mints to wallet
	•	Updates tx hash → pushes to notify_user

notification_worker.py
	•	Sends Telegram message with NFT metadata + links

🔁 Retry & Monitoring
	•	Max retries: 3 (retry_count)
	•	Log last_error
	•	If worker dies, fallback to polling Supabase queue

⸻

🔁 Phase 6: Content Generation

Condition	Action
tier = ai_generated & is_paid	→ enqueue to generate_nft
tier = manual & is_paid	→ enqueue directly to mint_nft

	•	RAG system enhances prompts before generation
	•	Supports multiple models: SDXL, DALL·E, AnimateDiff

⸻

🔥 Phase 7: NMKR Minting Integration
	•	Receives media from user or generation worker
	•	Uploads to NMKR (metadata + asset)
	•	Mints to provided Cardano wallet
	•	Updates Supabase with tx_hash and status = complete

⸻

🧠 Phase 8: Agno Agent Integration
	•	Built with Agno SDK for agent composability
	•	Agent exposes public MIP-003 endpoints:
	•	/input_schema, /output_schema, /start_job, /status
	•	Can be used by other Agno agents or tools
	•	/queue_job allows internal testing and inter-agent coordination

⸻

📚 Phase 9: RAG Integration with Agno VectorDB
	•	Stores NFT styles, themes, instructions, and user history
	•	Used to enhance prompts before generation (prompt → RAG → enriched prompt)
	•	Also powers /help and conversational responses
	•	Uses RetrievalChain via Agno’s VectorDB SDK

⸻

📊 Phase 10: Monitoring with Braintrust
	•	All workers integrate Braintrust SDK
	•	Track:
	•	Job duration
	•	Error/retry rate
	•	Revenue per job
	•	Expose in dashboard or alert system

⸻

🧬 Phase 11: Polish & Launch
	•	Inline Telegram UX (buttons, /status, /my_nfts)
	•	NFT preview thumbnails in bot
	•	Optional retry button for failed jobs
	•	Rate limit usage per wallet / user
	•	Add analytics dashboard (if time allows)

⸻

🧱 Infrastructure Notes

Component	Tool
Message Broker	RabbitMQ (Docker or CloudAMQP)
Worker Runtime	Python + asyncio (Pika or Celery)
Agent Server	FastAPI + Agno SDK
Deployment	Railway / Fly.io / Docker Compose
RAG & VectorDB	Agno VectorDB
Payments	Masumi
NFT Minting	NMKR Studio API


