---
description: 
globs: 
alwaysApply: true
---
Here is the updated Technical Specification for Astryn ‚Äì The Telegram NFT Agent, based on the revised architecture, tech stack, and hackathon-ready features (including RabbitMQ, Agno RAG, and Masumi):

‚∏ª

üìÑ Technical Specification: Astryn ‚Äì The Telegram NFT Agent

‚∏ª

üß† Project Overview

Astryn is an autonomous AI-powered Telegram bot that:
	‚Ä¢	Interacts with users via Telegram chat
	‚Ä¢	Accepts prompt or media uploads to create NFTs
	‚Ä¢	Generates content using AI (DALL¬∑E, SDXL, AnimateDiff)
	‚Ä¢	Mints NFTs on Cardano via NMKR
	‚Ä¢	Sends NFTs to user wallets
	‚Ä¢	Handles payments via Masumi
	‚Ä¢	Uses Agno‚Äôs agent framework and VectorDB for RAG
	‚Ä¢	Monitors all activity using Braintrust
	‚Ä¢	Supports agent-to-agent API calls via Agno‚Äôs MIP-003 interface

‚∏ª

‚öôÔ∏è Core Architecture

                +----------------------------+
                |      Telegram Bot (Astryn) |
                +-------------+--------------+
                              |
               +--------------v---------------+
               |     FastAPI Agent (Agno)     |
               |  /start_job, /status, RAG, etc. |
               +---+----------+---------+------+
                   |          |         |
              +----v--+   +---v----+  +--v----+
              | Queue |   | Vector |  | NMKR  |
              |RabbitMQ|  |  DB    |  | Mint  |
              +--------+  +--------+  +-------+
                   |         |
              +----v-----+   |
              | Workers  |<--+
              +----------+
                     |
              +------v------+
              | Supabase DB |
              +-------------+
                     |
              +------v------+
              | Braintrust  |
              +-------------+



‚∏ª

üì¶ Tech Stack Breakdown

‚∏ª

üß© Agent Framework

Feature	Stack	Notes
Web Agent Framework	Agno Agent SDK	Composable agent
API Server	FastAPI	Exposes MIP-003 endpoints
Agent Standards	MIP-003	/start_job, /status, etc.
VectorDB / RAG	Agno VectorDB	Prompt enrichment & support
Deployment	Docker / Railway / Fly.io	Portable and containerized



‚∏ª

üí≥ Payments

Feature	Stack	Notes
Crypto Payments	Masumi	User pays to unlock jobs
Pricing Model	Tiered (ADA)	Tier 1 (upload), Tier 2 (AI generation)
Payment Flow	Webhook	Masumi webhook updates Supabase job



‚∏ª

üé® Content Generation

Feature	Stack	Notes
Prompt-to-Image	DALL¬∑E / SDXL	For static NFTs
Prompt-to-Video	AnimateDiff / RunwayML	For short video NFTs
RAG Enhancement	Agno VectorDB	Style-aware prompt augmentation
Job Routing	RabbitMQ	Workers pick up generation tasks



‚∏ª

üíé NFT Minting

Feature	Stack	Notes
Blockchain	Cardano	Native asset minting
NFT Service	NMKR API	Upload & mint flow
Metadata Format	JSON (MIP-002)	Includes tx_hash, prompt, tier
Storage	Supabase + IPFS	Output hosted on NMKR/IPFS



‚∏ª

üí¨ Telegram Bot

Feature	Stack	Notes
Bot Framework	aiogram (Python)	Handles user input and wallet
Uploads	Telegram media API	Handles image/video
Status Check	Inline buttons + /status	
Notifications	Sent after mint via notify_worker.py	



‚∏ª

üîÑ Queue System

Feature	Stack	Notes
Queue Engine	RabbitMQ	Reliable async queueing
Job Lifecycle	Supabase + Enums	awaiting_payment ‚Üí paid ‚Üí ...
Workers	Pika / Celery (Python)	For generation, minting, notification
Retry Logic	Supabase + Max Retry	Tracks retry_count, last_error



‚∏ª

üìä Monitoring & Tracing

Feature	Stack	Notes
Prompt Tracing	Braintrust	Input ‚Üí Output flow
Worker Events	Braintrust SDK	Logs + metrics
DevOps Monitoring	Dashboard UI	Optional alerts via Discord/email



‚∏ª

üß† Agent Intelligence

Feature	Stack	Notes
Language Model	GPT-4 (optional)	RAG-enhanced prompts, support answers
Prompt Memory	Agno VectorDB	User history, style recall
Style Enhancer Chain	Agno Chains (opt.)	e.g., Persona ‚Üí RAG ‚Üí Generator
FAQ Assistant	RAG + RetrievalChain	Helps user understand Astryn via /help



‚∏ª

üõ¢Ô∏è Storage

Feature	Stack	Notes
Metadata DB	Supabase	Stores jobs, users, payments
Media Storage	Supabase Storage	Uploads + generated assets
NFT Metadata	NMKR IPFS / alt	Stored via NMKR for minting



‚∏ª

üöÄ Deployment & CI/CD

Feature	Stack	Notes
Containerization	Docker	All services containerized
Cloud Targets	Railway / Fly.io	Flexible deployment options
Secrets Management	.env files	Mounted at runtime
CI/CD Pipeline	GitHub Actions	Auto-deploy on push



üß™ Testing Plan

Layer	Tests
Agent API	Unit + Integration tests (Agno /start_job)
Telegram Bot	Full interaction test (upload + payment)
Content Gen	Prompt ‚Üí Generation ‚Üí Quality check
NFT Minting	NMKR mint test + IPFS validity
Queue Worker	Stress test with concurrency



‚∏ª

üß≠ Developer Setup

# Install dependencies
pip install -r requirements.txt

# Run local agent API
uvicorn agent.main:app --reload

# Run Telegram bot
python telegram_bot/bot.py

# Start queue workers
python workers/generation_worker.py
python workers/minting_worker.py
python workers/notification_worker.py

# Enable Braintrust
export BRAINTRUST_API_KEY=your_key



Let me know what format you need ‚Äî and I can generate the full file.