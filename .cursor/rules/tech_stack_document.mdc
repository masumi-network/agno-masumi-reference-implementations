---
description: 
globs: 
alwaysApply: true
---
# Tech Stack Document

This document outlines the technologies chosen for our agno agent project, explaining how they work together to create a seamless NFT minting solution. The goal is to ensure a user-friendly experience while maintaining efficiency across all components.

## Frontend Technologies

The frontend of our project provides a simple and intuitive interface for users to interact with the NFT minting pipeline. Here are the main technologies used:

- **Streamlit**
  - A lightweight framework for quickly building web applications. It offers a basic input form that captures all necessary user details and sends them to the backend, making it easy for users to kickstart their NFT creation process.

## Backend Technologies

Our backend is designed to manage the complex workflow required for NFT minting. It integrates multiple agents and services to transform user input into minted NFTs. The key components include:

- **Agno**
  - An agent framework that helps orchestrate several specialized agents (ContentCreator, Asset, Metadata, Mint, and Wallet Agents) to execute the NFT drop pipeline efficiently.
- **FastAPI**
  - A modern web framework used alongside Agno to expose endpoints for communication between the frontend and the agents, following the MIP-003 spec.
- **Supabase / PostgreSQL**
  - A robust database solution where essential data—such as NFT metadata, minting transaction hashes, and job statuses—is stored. The structure follows standard MCP in Supabase ensuring data integrity and easy querying.

## Infrastructure and Deployment

Reliable infrastructure is critical to ensuring that our application scales and performs consistently. Our choices include:

- **Hosting Platforms**:
  - While specific hosting details might be determined later, the integration of Agno with FastAPI allows for flexible deployment scenarios on popular cloud providers.
- **CI/CD Pipelines**:
  - These pipelines automate building, testing, and deploying updates to ensure the application remains stable and up-to-date.
- **Version Control Systems**:
  - Standard practices (e.g., Git repositories) are used to manage our codebase, making collaboration smooth and enhancing reliability.

## Third-Party Integrations

To enrich the functionality of our project, several third-party services have been integrated:

- **NMKR API**
  - Used for minting NFTs. Once the metadata and asset URIs are ready, NMKR API is called to execute the minting process on the Cardano blockchain.
- **IPFS (via NMKR or web3.storage)**
  - A decentralized storage solution ensuring that each NFT asset is stored with a unique URI, providing transparency and traceability.
- **Masumi Payments**
  - Integrated for a pay-per-mint model, this service handles all necessary payment transactions associated with NFT drops.
- **Braintrust**
  - A monitoring service that helps keep track of system performance, ensuring that all processes run smoothly and any issues are quickly identified.

## Security and Performance Considerations

Our application is built to be both performant and secure, even while it remains a hackathon demo with minimal security measures. Here’s how we approach these aspects:

- **Security Measures**:
  - **Wallet Verification**: The WalletAgent validates user wallet addresses and manages a hot wallet for signing transactions. Although advanced security is not implemented for the demo, this core feature lays the groundwork for future enhancements.
  - **Data Protection**: Sensitive user data and NFT metadata are stored securely in Supabase/PostgreSQL, following standard data protection practices.

- **Performance Optimizations**:
  - **Efficient Orchestration**: The JobAgent ensures that all specialized agents (content generation, asset upload, metadata creation, and minting) work together in a coordinated manner, reducing processing time and enhancing responsiveness.
  - **Standard Image Resolutions**: Images generated via DALL·E are in 1024x1024 resolution, optimizing the balance between image detail and file size, which is ideal for NFTs.

## Conclusion and Overall Tech Stack Summary

To summarize, our tech stack is carefully selected to meet the unique requirements of an NFT minting pipeline, ensuring it is robust, scalable, and user-friendly. Below is a recap of our technology choices:

- **Frontend**:
  - Streamlit

- **Backend**:
  - Agno
  - FastAPI
  - Supabase / PostgreSQL

- **Infrastructure and Deployment**:
  - Modern CI/CD pipelines
  - Hosting on flexible cloud platforms
  - Version control (e.g., Git)

- **Third-Party Integrations**:
  - NMKR API (for minting)
  - IPFS (for decentralized asset storage)
  - Masumi Payments (for monetization on a pay-per-mint basis)
  - Braintrust (for monitoring)

- **AI and Agent Tools**:
  - gpt_4o, claude_3_7_sonnet, claude, gemini_2-5 (for intelligent agent operations)
  - DALL·E (for creative image generation)

These choices are designed to work in harmony, ensuring that every step—from generating creative content, handling assets, and generating metadata to finally minting NFTs—is executed smoothly and reliably. The collaborative design, underpinned by a suite of specialized agents, makes our solution unique and effective in managing complex NFT minting workflows.

This tech stack not only fulfills the immediate requirements of our project but also provides a solid foundation for future scalability and potential security enhancements as the application evolves.