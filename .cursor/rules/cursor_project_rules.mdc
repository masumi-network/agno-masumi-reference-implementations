---
description: 
globs: 
alwaysApply: true
---
⸻

📜 Astryn – Project-Specific Rules

⸻

🧱 General Architecture Rules
	1.	Service-Oriented Structure:
Astryn is composed of modular services:
	•	telegram_bot/
	•	agent_api/ (FastAPI, Agno-compliant)
	•	workers/ (generation_worker.py, minting_worker.py, notify_user.py)
	•	queue/ (RabbitMQ broker)
	2.	Asynchronous by Default:
All services must use asyncio to prevent blocking operations (AI generation, API calls, Telegram messaging, etc.).
	3.	Supabase as the Source of Truth:
No job state is kept in-memory alone. All jobs must be persisted in Supabase with atomic updates (job.status, is_paid, etc.).
	4.	RabbitMQ as Job Dispatcher:
Long-running or rate-limited tasks (generation, minting, notification) must be queued. Never run blocking tasks directly from HTTP or bot handlers.

⸻

💰 Payment & Job Flow Rules
	1.	No Work Without Payment:
Jobs should not proceed (generation or minting) until is_paid = true.
	2.	Tier-Based Pricing:
	•	Tier 1: tier = manual → lower price, direct mint
	•	Tier 2: tier = ai_generated → higher price, queued generation
	3.	Payment Confirmation via Masumi Webhook Only:
Bot or user cannot manually mark a job as paid. Only Masumi callbacks can do this.

⸻

🎨 Generation Rules
	1.	Content Creation Only When Paid:
AI generation is triggered only after is_paid = true and tier = ai_generated.
	2.	Supported Media Types:
	•	Image: Static (via DALL·E, SDXL)
	•	Video: Short loops (via AnimateDiff, RunwayML)
	3.	Prompt Validity:
Prompt input must be ≥5 characters and safely filtered (no unsafe/genitalia/etc.)
	4.	File Size & Format Validation:
	•	User-uploaded content must be under 20MB
	•	Accepted: .jpg, .png, .mp4, .mov

⸻

🧾 Minting Rules
	1.	One NFT per Job:
Each job results in a single mint, mapped to a unique tx_hash.
	2.	NMKR Minting Policy:
	•	Metadata includes: creator handle, tier, generation method (manual/ai)
	•	Use dynamic asset names (e.g., AstrynNFT-0001)
	•	Royalties fixed at 5% to Astryn wallet (editable)
	3.	Delivery via Telegram:
Minting must be followed by a Telegram DM with:
	•	Success message
	•	NFT link
	•	Cardano explorer link (for tx_hash)

⸻

🧠 Agent Rules
	1.	Masumi & Agno Compliant:
	•	Astryn exposes /start_job, /status, /input_schema, /output_schema
	•	Only accepts MIP-003 valid job payloads
	2.	API-Accessible:
Astryn’s generation + minting capabilities are exposed via public API (with payment gating).
	3.	No Direct Job Start from API:
All external jobs must go through /start_job → payment → queue

⸻

📊 Monitoring & Observability Rules
	1.	Every Worker Logs to Braintrust:
	•	Job start time
	•	Job duration
	•	Success/failure
	•	Retry count
	2.	Error Reporting:
	•	Max retries = 3
	•	After 3 failures → set status = error and store last_error
	3.	Notifications on Failure:
	•	Telegram user should receive a graceful failure message with support option

⸻

📁 File & Directory Naming Rules
	•	All services: snake_case
	•	Worker files: minting_worker.py, generation_worker.py, notify_worker.py
	•	Configs: env.py, settings.py
	•	Agent API routes: /api/job, /api/status, /api/docs

⸻

🧪 Testing & DevOps Rules
	1.	Testable Components:
Each worker must be runnable in standalone test mode:

python workers/minting_worker.py --test job_id


	2.	Docker-First Local Dev:
Local dev must be supported with Docker Compose:
	•	supabase, rabbitmq, workers, api, bot
	3.	Secrets & API Keys:
Stored in .env and managed via environment variables

⸻

🤖 Telegram Bot Rules
	1.	No Minting in DMs Without Wallet
Every job must contain a valid Cardano wallet address.
	2.	Status Feedback Loop
Users can run /status or tap “🔁 Check Status” to view progress of their job
	3.	No Spamming
Rate-limit command usage to avoid abuse. Use Bot API throttling if necessary.
